#!/usr/bin/env php
<?php
require "../config.php";
include "lib/phpsockets.io.php";

//require "../conn.php";


$socket = new PHPWebSockets($server_ip, $server_port);

$socket->on('test', function ($socket, $data) {
    $socket->broadcast ('test', $data ." refresh");
});

/* * *
 * 
 * When a new socket is connect, send back its own autogenerated id
 * 
 *   @param  object  $socket    The socket object of the current client
 *   @param  int  $uid		   The user id of the current client
 * 
 * * */
$socket->on("connect", function($socket, $uid) {
    $socket->emit('connect', $uid);
    //$socket -> broadcast ('test', $socket->user->id);
}, true);

/* * *
 * 
 * a callback to handle the command "add user" from a client
 * this is used by the advanced example to process a user login
 * 
 *   @param  object  $socket    The socket object of the current client
 *   @param  int  $username	   The username of the current client
 *   @param  int  $userid	   The user id of the current client
 * 
 * * */
$socket->on("add user", function($socket, $username, $userid) {
    $socket->username = $username;
    //add the client's username to the global list
    //$socket->usernames["$username"] = $username;
    $socket->socketID["$userid"] = $username;
    $socket->numUsers++;

    //inform me that my login was successful
    $socket->emit('login', array(
        'numUsers' => $socket->numUsers
    ));
    //two arraies to sotre the ids ans ips
    $ids = array();
    $ips = array();
    foreach ($socket->socketID as $key => $val) {
        array_push($ids, $key);
        array_push($ips, $val);
    };
    //broadcast the current user list
    $socket->broadcast('user list', array(
        'users' => json_encode($ips),
        'ids' => json_encode($ids)
            ), true);
    $socket->addedUser = true;
});

/* * *
 * 
 * a callback to broadcast when client broadcasts a chat message
 * this is used by the basic example to handle a chat message being sent
 * 
 *   @param  object  $socket    The socket object of the current client
 *   @param  string  $data	   Data sent along with callback
 *   @param  string  $sender	   The client sending the message
 * 
 * * */
$socket->on('chat message', function ($socket, $data, $sender) {
    //$socket->broadcast('client message', $data);
    $socket->broadcast('chat message', $data);
});

/* * *
 * 
 * When received msg from client
 * send these msg to weshop
 * 
 * * */
$socket->on('client msg', function ($socket, $data) {
    $socketID = $socket->user->id;
    $client = $data->username;
    $msg = $data->msg;
    global $weshop_ip;
    $weshop = $socket->getUserByName($weshop_ip);
    $socket->push($weshop, 'client msg', array(
        'socketID' => $socketID,
        'client' => $client,
        'msg' => $msg,
    ));
    //global $conn;
    // $do = "INSERT INTO msg (socketID, ip, msg, others) VALUES ('$socketID','$client','$msg','msg online')";
    // $res = mysqli_query($conn, $do);
});

$socket->on('weshop reconnected', function ($socket, $status) {
//    $socket->broadcast('user list', array(
//        'users' => json_encode(array_unique(array_values($socket->usernames)))
//            ), true);
    //two arraies to sotre the ids ans ips
    $ids = array();
    $ips = array();
    foreach ($socket->socketID as $key => $val) {
        array_push($ids, $key);
        array_push($ips, $val);
    };
    //broadcast the current user list
    $socket->broadcast('user list', array(
        'users' => json_encode($ips),
        'ids' => json_encode($ids)
            ), true);
    $socket->broadcast('weshop reconnected', $status);
});

/* * *
 * 
 * When received msg from weshop
 * send these msg to certain client
 * store these msg to mydb
 * 
 * * */
$socket->on('reply', function ($socket, $data) {
    $sender = @$socket->socketID[$socket->user->id];
    if ($sender != null) {
        $toClientIP = $data->name;
        $toClientID = $data->id;
        $data = $data->data;
        $re = $socket->getUserById($toClientID);
        $socket->push($re, 'reply', array(
            'sender' => $sender,
            'data' => $data,
        ));
    }
    $socketID = $socket->user->id;
    // global $conn;
    // $do = "INSERT INTO msg (socketID, ip, msg, others) VALUES ('$toClientID','$toClientIP','$data','reply')";
    // $res = mysqli_query($conn, $do);
});

/* * *
 * 
 * When a socket is disconnected
 * 
 * * */

$socket->on("disconnect", function($socket, $data) {
    // remove the username from global usernames list
    if ($socket->addedUser) {
        $socketDisconnect = $socket->user->id;
        //unset($socket->usernames[$socket->username]);
        unset($socket->socketID[$socketDisconnect]);
        $socket->numUsers--;

        // echo globally that this client has left
        $socket->broadcast('user left', array(
            'username' => $socket->username,
            'numUsers' => $socket->numUsers
        ));
        //two arraies to sotre the ids ans ips
        $ids = array();
        $ips = array();
        foreach ($socket->socketID as $key => $val) {
            array_push($ids, $key);
            array_push($ips, $val);
        };
        //broadcast the current user list
        $socket->broadcast('user list', array(
            'users' => json_encode($ips),
            'ids' => json_encode($ids)
                ), true);
    }
});













/**
 * a callback to broadcast typing message to other connected users (other than the current client who is typing)
 * this is used by the advanced example to handle a message being typed
 * 
 *   @param  object  $socket    The socket object of the current client
 *   @param  string  $data	   Data sent along with callback
 * 
 */
$socket->on('typing', function ($socket, $data) {

    $socket->broadcast('typing', array(
        'username' => $socket->socketID[$socket->user->id],
    ));
});
/**
 * a callback to send message to a specific user
 * this is used by the chat im example to handle a message being typed
 * 
 *   @param  object  $socket    The socket object of the current client
 *   @param  object  $data	   Data object sent containing keys - to and data
 * 
 */
$socket->on('im user', function ($socket, $data) {
    $sender = @$socket->socketID[$socket->user->id];
    if ($sender != null) {
        $to = $data->to;
        $data = $data->data;
        $re = $socket->getUserByName($to);
        $socket->push($re, 'im user', array(
            'sender' => $sender,
            'data' => $data,
        ));
    }
});

/**
 * a callback to broadcast when client is no longer typing 
 * this is used by the advanced example to handle a message being typed
 * 
 *   @param  object  $socket    The socket object of the current client
 *   @param  string  $data	   Data sent along with callback
 * 
 */
$socket->on('stop typing', function ($socket, $data) {

    $socket->broadcast('stop typing', array(
        'username' => $socket->socketID[$socket->user->id],
    ));
});
/**
 * a callback to broadcast when client broadcasts a "new message"
 * this is used by the advanced example to handle a chat message being sent
 * 
 *   @param  object  $socket    The socket object of the current client
 *   @param  string  $data	   Data sent along with callback
 *   @param  string  $sender	   The client sending the message
 * 
 */
$socket->on('new message', function ($socket, $data, $sender) {
    // we tell the client to execute 'new message'
    $socket->broadcast('new message', array(
        'username' => $socket->socketID[$socket->user->id],
        'message' => $data
    ));
});

//instantiate and start handling transactions
$socket->listen();
?>
